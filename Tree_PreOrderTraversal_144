/*************************************************************************************************************************************
 * Problem: https://leetcode.com/problems/binary-tree-preorder-traversal/description/
 * Solution: 
 * Both recursive and iterative ways are provided below. 
 * Iterative: push right first to stack, then push left. Two ways of recursive iterative are provided. 
 * Simplify iterative: preorder no need to record curr node. 
 *************************************************************************************************************************************/
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Integer> list = new ArrayList<>();
    public List<Integer> preorderTraversal_Recursive(TreeNode root) {
        preorderRecursive(root);
        return this.list;
    }
    
    private void preorderRecursive(TreeNode node){
        if(node == null){
            return;
        }
        //Visit node
        this.list.add(node.val);
        preorderRecursive(node.left);
        preorderRecursive(node.right);
    }
    
    public List<Integer> preorderTraversal_Iterative_Standard(TreeNode root) {
       List<Integer> list = new ArrayList<>();
       Stack<TreeNode> stack = new Stack<>();
       TreeNode curr = root;
       while(!stack.isEmpty() || curr!=null){
           if(curr!=null){
               // Visit curr node
               list.add(curr.val);
               stack.push(curr);
               curr = curr.left;
           }else{
               // Traverse right sub-tree
               curr = stack.pop().right;
           }
       }
       return list;
    }
    
     public List<Integer> preorderTraversal_Iterative_Simplify(TreeNode root) {
         List<Integer> list = new ArrayList<>();
         if(root==null){
             return list;
         }
         Stack<TreeNode> stack = new Stack<>();
         stack.push(root);
         while(!stack.isEmpty()){
             // Visit current node. no need to push into stack
             TreeNode curr = stack.pop();
             list.add(curr.val);
             // Push right first
             if(curr.right!=null){
                 stack.push(curr.right);
             }
             if(curr.left!=null){
                 stack.push(curr.left);
             }
         }
         return list;
     }
    
  }
